{"version":3,"sources":["auth.controllers.js"],"names":["User","require","jwt","bcrypt","login","req","res","body","username","password","status","send","message","findOne","user","compare","isValidPassword","toJSON","hashedPassword","_id","userDetails","token","sign","expiresIn","register","firstName","lastName","admin","save","error","module","exports"],"mappings":"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","sourcesContent":["const User = require(\"../models/user.model\");\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcrypt\");\n\nconst login = async (req, res) => {\n  const { username, password } = req.body;\n  if (!username || !password) {\n    res.status(400).send({ message: \"All fields are required\" });\n    return;\n  }\n  // check if user is available in DB\n  const user = await User.findOne({ username });\n  if (!user) res.status(400).send({ message: \"Invalid username/password\" });\n\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  if (!isValidPassword) {\n    res.status(400).send({ message: \"Invalid username/password\" });\n    return;\n  }\n  const { password: hashedPassword, _id, ...userDetails } = user.toJSON();\n\n  // generate JWT token\n  const token = jwt.sign(\n    {\n      ...userDetails,\n    },\n    \"MARGO\",\n    { expiresIn: \"2 days\" }\n  );\n\n  res.status(200).send({\n    user: userDetails,\n    token,\n    message: \"Signed In\",\n  });\n};\n\nconst register = async (req, res) => {\n  const { username, password, firstName, lastName, admin } = req.body;\n  if (!username || !password || !firstName || !lastName) {\n    res.status(400).send({ message: \"all fields are required\" });\n  }\n\n  try {\n    // const user = await User.create({ username, password, firstName, lastName });\n\n    const user = new User({\n      username,\n      password,\n      firstName,\n      lastName,\n      admin,\n    });\n\n    await user.save();\n\n    res.status(200).send({ user });\n  } catch (e) {\n    res.status(500).send({ error: e });\n  }\n};\n\nmodule.exports = {\n  login,\n  register,\n};\n"],"file":"auth.controllers.dev.js"}
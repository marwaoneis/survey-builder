{"version":3,"sources":["auth.controllers.js"],"names":["User","require","jwt","bcrypt","login","req","res","_req$body","username","password","user","_user$toJSON","userDetails","token","regeneratorRuntime","async","_context","prev","next","body","status","send","message","abrupt","awrap","findOne","sent","compare","toJSON","_id","_objectWithoutProperties","sign","_objectSpread","expiresIn","stop","register","_req$body2","firstName","lastName","admin","_context2","isValidPassword","t0","error","module","exports"],"mappings":"8qCAAA,IAAMA,KAAOC,QAAQ,wBACfC,IAAMD,QAAQ,gBACdE,OAASF,QAAQ,UAEjBG,MAAQ,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAX,EACmBF,EAAIc,KAA3BX,EADID,EACJC,SAAUC,EADNF,EACME,SACbD,GAAaC,EAFN,CAAAO,EAAAE,KAAA,EAAA,MAAA,OAGVZ,EAAIc,OAAO,KAAKC,KAAK,CAAEC,QAAS,4BAHtBN,EAAAO,OAAA,UAAA,KAAA,EAAA,OAAAP,EAAAE,KAAA,EAAAJ,mBAAAU,MAOOxB,KAAKyB,QAAQ,CAAEjB,SAAAA,KAPtB,KAAA,EAAA,OAONE,EAPMM,EAAAU,OAJDzB,EAAAA,OAAQ,KAAAoB,KAAA,CAAAC,QAArB,8BAIcN,EAAAE,KAAA,GAAAJ,mBAAAU,MAHKrB,OAAnBwB,QAAAlB,EAAAC,EAAAD,WAGc,KAAA,GAAA,GAAAO,EAAAU,KAAA,CAAAV,EAAAE,KAAA,GAAA,MAAA,OAFRf,EAAAA,OAASF,KAAOoB,KAAC,CAAAC,QAAvB,8BAEcN,EAAAO,OAAA,UAAA,KAAA,GAAAZ,EAAAD,EAAAkB,SAAAjB,EAAAF,SAAAE,EAAAkB,IAAAjB,EAAAkB,yBAAAnB,EAAA,CAAA,WAAA,QAAAE,EAAAX,IAAA6B,KAAAC,cAAA,GAAApB,GAsBV,QAtBU,CAAAqB,UAEPzB,WAFOF,EAAAc,OAAA,KAAAC,KAAA,CA2BVX,KAAME,EAxBNN,MAAAA,EAAuBgB,QAAAA,cAHb,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAkB,WAAAC,SAAA,SAAA9B,EAAAC,GAAA,IAAA8B,EAAA5B,EAAAC,EAAA4B,EAAAC,EAAAC,EAAA7B,EAAA,OAAAI,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OAAAkB,EAAA/B,EAAAc,KAAAX,EAAA4B,EAAA5B,SAAAC,EAAA2B,EAAA3B,SAAA4B,EAAAD,EAAAC,UAAAC,EAAAF,EAAAE,SAAAC,EAAAH,EAAAG,MAAA/B,GAAAC,GAAA4B,GAOYZ,GAAUjB,EAAAA,OAAAA,KAAQa,KAARb,CAAAA,QAAAA,4BAPtBgC,EAAAvB,KAAA,EAQsBK,EAAAA,IAAStB,KAAA,CAAXQ,SAAAA,EARpBC,SAAAA,EAAA4B,UAAAA,EA8CRC,SAAAA,EA9CQC,MAAAA,IAAAC,EAAAtB,KAAA,EAAAJ,mBAAAU,MAAAd,EAWP+B,QAXO,KAAA,EAAAnC,EAAAc,OAAA,KAAAC,KAAA,CAAAX,KAAAA,IAAA8B,EAAAtB,KAAA,GAAA,MAAA,KAAA,EAAAsB,EAAAvB,KAAA,EAAAuB,EAAAE,GAAAF,EAAA,MAAA,GAsDVlC,EAAIc,OAAO,KAAKC,KAAK,CAAEsB,MAAKH,EAAAE,KAtDlB,KAAA,GAAA,IAAA,MAAA,OAAAF,EAAAN,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAAU,OAAAC,QAAA,CA2DZzC,MAAAA,MA3DY+B,SAAAA","file":"auth.controllers.min.js","sourcesContent":["const User = require(\"../models/user.model\");\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcrypt\");\n\nconst login = async (req, res) => {\n  const { username, password } = req.body;\n  if (!username || !password) {\n    res.status(400).send({ message: \"All fields are required\" });\n    return;\n  }\n  // check if user is available in DB\n  const user = await User.findOne({ username });\n  if (!user) res.status(400).send({ message: \"Invalid username/password\" });\n\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  if (!isValidPassword) {\n    res.status(400).send({ message: \"Invalid username/password\" });\n    return;\n  }\n  const { password: hashedPassword, _id, ...userDetails } = user.toJSON();\n\n  // generate JWT token\n  const token = jwt.sign(\n    {\n      ...userDetails,\n    },\n    \"MARGO\",\n    { expiresIn: \"2 days\" }\n  );\n\n  res.status(200).send({\n    user: userDetails,\n    token,\n    message: \"Signed In\",\n  });\n};\n\nconst register = async (req, res) => {\n  const { username, password, firstName, lastName, admin } = req.body;\n  if (!username || !password || !firstName || !lastName) {\n    res.status(400).send({ message: \"all fields are required\" });\n  }\n\n  try {\n    // const user = await User.create({ username, password, firstName, lastName });\n\n    const user = new User({\n      username,\n      password,\n      firstName,\n      lastName,\n      admin,\n    });\n\n    await user.save();\n\n    res.status(200).send({ user });\n  } catch (e) {\n    res.status(500).send({ error: e });\n  }\n};\n\nmodule.exports = {\n  login,\n  register,\n};\n"]}